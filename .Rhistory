options(scipen =999 )
#setwd("U:/R/Rstudio")
library(tidyverse)
library(plotly)
library(ggplot2)
#library(ggiraph)
library(scales)
library(readxl)
dados <- read_excel('ANALISEPARETO.xlsx')
#dados <- read_excel('U:/R/Rstudio/tabelas/ANALISEPARETO.xlsx')
p <- ggplot(data=dados, aes(x=VP_E, y=VP_S, group=xProd)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
scale_x_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
geom_vline(xintercept = summary(dados$VP_E)[2]) +
geom_hline(yintercept = summary(dados$VP_S)[4])+
geom_vline(xintercept =  dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E) )+
geom_hline(yintercept = dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S))+
#Caso 1-  Principais produtos #
dados %>%  filter((VP_E>dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E))
& (VP_S>dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) )  %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='red',
size=2,alpha = 2)+
# Caso VP_E>>VP_S
dados %>% filter( VP_S<summary(dados$VP_S)[4]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='green',
size=2,alpha = 2) +
# Caso VP_S>>VP_E
dados %>% filter( VP_E<summary(dados$VP_E)[2]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='brown',
size=2,alpha = 2) +
# Caso "normal"
dados %>% filter( (VP_S >summary(dados$VP_S)[4]) & (  VP_E<(dados %>% arrange(desc(VP_E)) %>% slice(20)%>% pull(VP_E))  )                ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='blue',
size=2,alpha = 2) +
# Mark_up 0 ( Valor de Saída igual ao valor de entrada)
geom_abline(intercept = 0, slope = 1, color = "red")
fig <- ggplotly(p)
fig
c(summary(dados$VP_E)[2],summary(dados$VP_S)[4])
top_VP %>% knitr::kable()
dados %>%
mutate(margem = VP_S*100/VP_E) %>% # Cálculo da margem VP saída sobre entrada.
filter(!is.na(margem)) %>% # Retirando NAs.
filter(margem <= 200) %>% # Retirando margens acima de 200%.
ggplot(aes(x = margem)) +
# Fazendo a base de cada columa de 10 em 10 por cento.
geom_histogram(binwidth = 10,
color="black", fill="orange") +
theme_bw()
dados2 <- dados %>% slice_max(VP_E, n = 20)
dados3 <- dados %>% slice_max(VP_S, n = 20)
top_VP<- intersect(dados2,dados3)
dados4<- anti_join(dados, top_VP)
top_VP %>% knitr::kable()
top_VP %>% knitr::kable(
caption = "Mercadorias com os maiores VP"
)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(scipen =999 )
#setwd("U:/R/Rstudio")
library(tidyverse)
library(plotly)
library(ggplot2)
#library(ggiraph)
library(scales)
library(readxl)
dados <- read_excel('ANALISEPARETO.xlsx')
#dados <- read_excel('U:/R/Rstudio/tabelas/ANALISEPARETO.xlsx')
p <- ggplot(data=dados, aes(x=VP_E, y=VP_S, group=xProd)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
scale_x_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
geom_vline(xintercept = summary(dados$VP_E)[2]) +
geom_hline(yintercept = summary(dados$VP_S)[4])+
geom_vline(xintercept =  dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E) )+
geom_hline(yintercept = dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S))+
#Caso 1-  Principais produtos #
dados %>%  filter((VP_E>dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E))
& (VP_S>dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) )  %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='red',
size=2,alpha = 2)+
# Caso VP_E>>VP_S
dados %>% filter( VP_S<summary(dados$VP_S)[4]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='green',
size=2,alpha = 2) +
# Caso VP_S>>VP_E
dados %>% filter( VP_E<summary(dados$VP_E)[2]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='brown',
size=2,alpha = 2) +
# Caso "normal"
dados %>% filter( (VP_S >summary(dados$VP_S)[4]) & (  VP_E<(dados %>% arrange(desc(VP_E)) %>% slice(20)%>% pull(VP_E))  )                ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='blue',
size=2,alpha = 2) +
# Mark_up 0 ( Valor de Saída igual ao valor de entrada)
geom_abline(intercept = 0, slope = 1, color = "red")
fig <- ggplotly(p)
fig
c(summary(dados$VP_E)[2],summary(dados$VP_S)[4])
dados %>%
mutate(margem = VP_S*100/VP_E) %>% # Cálculo da margem VP saída sobre entrada.
filter(!is.na(margem)) %>% # Retirando NAs.
filter(margem <= 200) %>% # Retirando margens acima de 200%.
ggplot(aes(x = margem)) +
# Fazendo a base de cada columa de 10 em 10 por cento.
geom_histogram(binwidth = 10,
color="black", fill="orange") +
theme_bw()
dados2 <- dados %>% slice_max(VP_E, n = 20)
dados3 <- dados %>% slice_max(VP_S, n = 20)
top_VP<- intersect(dados2,dados3)
dados4<- anti_join(dados, top_VP)
top_VP %>% knitr::kable(
caption = "Mercadorias com os maiores VP"
)
irrelevancia<-dados4 %>%
filter(VP_S<=summary(dados4$VP_S)[4]& VP_E<=summary(dados4$VP_E)[2])
caso2<- dados4 %>%
filter(VP_S<summary(dados4$VP_S)[4])  %>%
arrange(desc(VP_E))
caso2 %>%
head(20) %>% knitr::kable()
caso3<- dados4 %>%
filter(VP_E<summary(dados4$VP_E)[2])  %>%
arrange(desc(VP_S))
caso3 %>%
head(20) %>% knitr::kable()
dados5<- anti_join(dados4, caso2)
dados6<- anti_join(dados5, caso3)
dados7<- anti_join(dados6, irrelevancia)
p7 <- ggplot(data=dados7, aes(x=VP_E, y=VP_S, group=xProd)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
scale_x_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
geom_vline(xintercept = summary(dados$VP_E)[2]) +
geom_hline(yintercept = summary(dados$VP_S)[4])+
geom_vline(xintercept =  dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E) )+
geom_hline(yintercept = dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) +
#Caso 1-  Principais produtos #
dados7 %>%  filter((VP_E>dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E))
& (VP_S>dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) )  %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='red',
size=2,alpha = 2)+
# Caso VP_E>>VP_S
dados7 %>% filter( VP_S<summary(dados$VP_S)[4]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='green',
size=2,alpha = 2) +
# Caso VP_S>>VP_E
dados7 %>% filter( VP_E<summary(dados$VP_E)[2]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='brown',
size=2,alpha = 2) +
# Caso "normal"
dados7 %>% filter( (VP_S >summary(dados$VP_S)[4]) & (  VP_E<(dados %>% arrange(desc(VP_E)) %>% slice(20)%>% pull(VP_E))  )                ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='blue',
size=2,alpha = 2)
fig7 <- ggplotly(p7)
fig7
library(ggplot2)
library(ggiraph)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(scipen =999 )
#setwd("U:/R/Rstudio")
library(tidyverse)
library(plotly)
library(ggplot2)
#library(ggiraph)
library(scales)
library(readxl)
dados <- read_excel('ANALISEPARETO.xlsx')
#dados <- read_excel('U:/R/Rstudio/tabelas/ANALISEPARETO.xlsx')
p <- ggplot(data=dados, aes(x=VP_E, y=VP_S, group=xProd)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
scale_x_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
geom_vline(xintercept = summary(dados$VP_E)[2]) +
geom_hline(yintercept = summary(dados$VP_S)[4])+
geom_vline(xintercept =  dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E) )+
geom_hline(yintercept = dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S))+
#Caso 1-  Principais produtos #
dados %>%  filter((VP_E>dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E))
& (VP_S>dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) )  %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='red',
size=2,alpha = 2)+
# Caso VP_E>>VP_S
dados %>% filter( VP_S<summary(dados$VP_S)[4]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='green',
size=2,alpha = 2) +
# Caso VP_S>>VP_E
dados %>% filter( VP_E<summary(dados$VP_E)[2]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='brown',
size=2,alpha = 2) +
# Caso "normal"
dados %>% filter( (VP_S >summary(dados$VP_S)[4]) & (  VP_E<(dados %>% arrange(desc(VP_E)) %>% slice(20)%>% pull(VP_E))  )                ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='blue',
size=2,alpha = 2) +
# Mark_up 0 ( Valor de Saída igual ao valor de entrada)
geom_abline(intercept = 0, slope = 1, color = "red")
fig <- ggplotly(p)
fig
c(summary(dados$VP_E)[2],summary(dados$VP_S)[4])
dados %>%
mutate(margem = VP_S*100/VP_E) %>% # Cálculo da margem VP saída sobre entrada.
filter(!is.na(margem)) %>% # Retirando NAs.
filter(margem <= 200) %>% # Retirando margens acima de 200%.
ggplot(aes(x = margem)) +
# Fazendo a base de cada columa de 10 em 10 por cento.
geom_histogram(binwidth = 10,
color="black", fill="orange") +
theme_bw()
dados2 <- dados %>% slice_max(VP_E, n = 20)
dados3 <- dados %>% slice_max(VP_S, n = 20)
top_VP<- intersect(dados2,dados3)
dados4<- anti_join(dados, top_VP)
top_VP %>% knitr::kable(
caption = "Mercadorias com os maiores VP"
)
irrelevancia<-dados4 %>%
filter(VP_S<=summary(dados4$VP_S)[4]& VP_E<=summary(dados4$VP_E)[2])
caso2<- dados4 %>%
filter(VP_S<summary(dados4$VP_S)[4])  %>%
arrange(desc(VP_E))
caso2 %>%
head(20) %>% knitr::kable()
caso3<- dados4 %>%
filter(VP_E<summary(dados4$VP_E)[2])  %>%
arrange(desc(VP_S))
caso3 %>%
head(20) %>% knitr::kable()
dados5<- anti_join(dados4, caso2)
dados6<- anti_join(dados5, caso3)
dados7<- anti_join(dados6, irrelevancia)
p7 <- ggplot(data=dados7, aes(x=VP_E, y=VP_S, group=xProd)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
scale_x_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
geom_vline(xintercept = summary(dados$VP_E)[2]) +
geom_hline(yintercept = summary(dados$VP_S)[4])+
geom_vline(xintercept =  dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E) )+
geom_hline(yintercept = dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) +
#Caso 1-  Principais produtos #
dados7 %>%  filter((VP_E>dados %>% arrange(desc(VP_E)) %>% slice(20) %>% pull(VP_E))
& (VP_S>dados %>% arrange(desc(VP_S)) %>% slice(20) %>% pull(VP_S)) )  %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='red',
size=2,alpha = 2)+
# Caso VP_E>>VP_S
dados7 %>% filter( VP_S<summary(dados$VP_S)[4]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='green',
size=2,alpha = 2) +
# Caso VP_S>>VP_E
dados7 %>% filter( VP_E<summary(dados$VP_E)[2]                                              ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='brown',
size=2,alpha = 2) +
# Caso "normal"
dados7 %>% filter( (VP_S >summary(dados$VP_S)[4]) & (  VP_E<(dados %>% arrange(desc(VP_E)) %>% slice(20)%>% pull(VP_E))  )                ) %>%
geom_point(mapping=aes(x=VP_E,y=VP_S),
color='blue',
size=2,alpha = 2)
fig7 <- ggplotly(p7)
fig7
dados7 %>% arrange(desc(VP_S)) %>%
head(10)  %>%
knitr::kable()
dados7  %>%
ggplot(aes(x = BC_E, y = BC_S)) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw()
p9 <-dados7 %>% filter(BC_S<100) %>%
ggplot(aes(x = BC_S, y = VP_S,group=xProd)) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw() +
geom_abline(intercept = 0, slope = 1, color = "red")
fig9 <- ggplotly(p9)
fig9
p9 <-dados7  %>%
ggplot(aes(x = BC_S, y = VP_S,group=xProd)) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw() +
geom_abline(intercept = 0, slope = 15, color = "red")
fig9 <- ggplotly(p9)
fig9
dados7 %>% filter(VP_S>15*BC_S)
p8 <-dados7  %>%
ggplot(aes(x = BC_E, y = VP_E,group=xProd)) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw() +
geom_abline(intercept = 0, slope = 15, color = "red")
fig8 <- ggplotly(p8)
fig8
dados7 %>% filter(VP_E>15*BC_E)
library(ggvenn)
install.packages('ggvenn')
library(ggvenn)
# use data.frame as input
d <- tibble(value   = c(1,     2,     3,     5,     6,     7,     8,     9),
`Set 1` = c(TRUE,  FALSE, TRUE,  TRUE,  FALSE, TRUE,  FALSE, TRUE),
`Set 2` = c(TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE),
`Set 3` = c(TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE),
`Set 4` = c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE))
e <- list('saida' = dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd)  ,
'Entrada' = dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)   )
# ggplot gramma
ggplot(e) +
geom_venn(aes(A = `Set 1`, B = `Set 2`)) +
coord_fixed() +
theme_void()
library(ggvenn)
x<- list(
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd) %>% as.matrix() ,
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)  %>% as.matrix() )
x
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd)
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)
C<- intersect(A,B)
C
library(ggVennDiagram)
install.packages('ggVennDiagram')
library(ggvenn)
x<- list(
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd) %>% as.matrix() ,
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)  %>% as.matrix() )
x
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd)
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)
C<- intersect(A,B)
C
library(ggVennDiagram)
# Default plot
library(gplots)
v.table <- venn(x )
v.table
print(v.table)
gplots::
library(ggvenn)
x<- list(
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd) %>% as.matrix() ,
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)  %>% as.matrix() )
x
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd)
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)
C<- intersect(A,B)
C
library(ggVennDiagram)
# Default plot
library(gplots)
v.table <- venn(x )
v.table
print(v.table)
require(VennDiagram)
vp <- venn.diagram(list(A=1:5,B=1,C=c(4,8:10),D=c(4:12)),
fill = 2:5, alpha = 0.3, filename = NULL);
library(ggvenn)
x<- list(
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd) %>% as.matrix() ,
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)  %>% as.matrix() )
x
A<-dados7 %>%  drop_na()  %>% filter(VP_S>15*BC_S) %>% select(cProd)
B<- dados7 %>%  drop_na() %>% filter(VP_E>15*BC_E)  %>% select(cProd)
C<- intersect(A,B)
C
library(ggVennDiagram)
# Default plot
library(gplots)
v.table <- venn(x )
v.table
print(v.table)
require(VennDiagram)
#vp <- venn.diagram(list(A=1:5,B=1,C=c(4,8:10),D=c(4:12)),
#                   fill = 2:5, alpha = 0.3, filename = NULL);
grid.draw(x)
library(ggforce)
Saida_Ntrib<-   dados7 %>% na.omit() %>% filter(VP_S>15*BC_S)
Entrada_Ntrib<- dados7 %>% na.omit() %>% filter(VP_E>15*BC_E)
Ntrib <- union(Saida_Ntrib,Entrada_Ntrib)
Ntrib <- mutate(Ntrib, tipo=if_else(VP_S>15*BC_S,"Saída não Tributada","Entrada não Tributada"))
ggplot(Ntrib,aes(BC_E,BC_S, color=tipo, group=tipo)) +
geom_mark_ellipse(data=Ntrib ,aes(x=tipo,fill=tipo, label=tipo )) +
geom_point(size = 2, alpha = 1) +
scale_y_continuous(trans = "log10")
library(ggforce)
Saida_Ntrib<-   dados7 %>% na.omit() %>% filter(VP_S>15*BC_S)
Entrada_Ntrib<- dados7 %>% na.omit() %>% filter(VP_E>15*BC_E)
Ntrib <- union(Saida_Ntrib,Entrada_Ntrib)
Ntrib <- mutate(Ntrib, tipo=if_else(VP_S>15*BC_S,"Saída não Tributada","Entrada não Tributada"))
ggplot(Ntrib,aes(BC_E,BC_S)) +
geom_point(size = 2, alpha = 1) +
geom_mark_ellipse(aes(fill = tipo,filter=tipo != "Saída não Tributada") ) +
geom_mark_ellipse(aes(fill = tipo,filter=tipo == "Saída não Tributada") ) +
scale_y_continuous(trans = "log10")
dados7 %>% na.omit() %>% filter(VP_S>15*BC_S)
dados7 %>% na.omit() %>% filter(VP_E>15*BC_E)
geom_mark_ellipse(aes(fill = Species, label = Species,
filter = Species != 'versicolor')) +
library(ggforce)
Saida_Ntrib<-   dados7 %>% na.omit() %>% filter(VP_S>15*BC_S)
Entrada_Ntrib<- dados7 %>% na.omit() %>% filter(VP_E>15*BC_E)
Ntrib <- union(Saida_Ntrib,Entrada_Ntrib)
Ntrib <- mutate(Ntrib, tipo=if_else(VP_S>15*BC_S,"Saída não Tributada","Entrada não Tributada"))
ggplot(Ntrib,aes(BC_E,BC_S)) +
geom_point(size = 2, alpha = 1) +
geom_mark_ellipse(aes(fill = tipo,filter=tipo != "Saída não Tributada") ) +
geom_mark_ellipse(aes(fill = tipo,filter=tipo == "Saída não Tributada") ) +
scale_y_continuous(trans = "log10")
dados7 %>% na.omit() %>% filter(VP_S>15*BC_S)
dados7 %>% na.omit() %>% filter(VP_E>15*BC_E)
#geom_mark_ellipse(aes(fill = Species, label = Species,
#                        filter = Species != 'versicolor')) +
dados7 %>% filter(VP_S>15*BC_S) %>% select(xProd)
dados7 %>% filter(VP_E>15*BC_E)  %>% select(xProd)
intersect(dados7 %>% filter(VP_S>15*BC_S) %>% select(xProd), dados7 %>% filter(VP_E>15*BC_E)  %>% select(xProd) )
p10 <- dados7  %>%
ggplot(aes(x = BC_S, y = ICMS_S,group=xProd)) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw()
fig10 <-ggplotly(p10)
fig10
fig11 <-dados7  %>%
ggplot(aes(x = xProd, y = 100*ICMS_S/BC_S),group=xProd) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw()
ggplotly(fig11)
fig12 <- dados7  %>%
ggplot(aes(x = xProd, y = 100*ICMS_E/BC_E),group=xProd) +
# Alpha dá transparência ao ponto para mostrar que estão sobrepostos.
geom_point(size=2, alpha = 0.5) +
geom_smooth(method = lm,size = .5, se = FALSE) + # A linha de regressão linear.
theme_bw()
ggplotly(fig12)
top_VP %>% arrange(desc(VP_S)) %>%
head(10)  %>%
knitr::kable()
caso2 %>% arrange(desc(VP_E)) %>%
head(10)  %>%
knitr::kable()
caso3 %>% arrange(desc(VP_S)) %>%
head(10)  %>%
knitr::kable()
dados7 %>% mutate(CLASSIFICACAO = "") %>%  head(8)  %>%
knitr::kable()
#library(DataEditR)
#library(tidyverse)
#library(tidyquant)
dados8<- dados7 %>% select(cProd,xProd) %>%  mutate(classificacao= as.character("a"))
#classificacao <- data_edit(x=dados8)
#classificacao %>%  head(10)  %>%
#knitr::kable()
library(caTools)
library(FactoMineR)
install.packages('FactorMineR')
library(caTools)
library(FactoMineR)
library(caTools)
#library(FactoMineR)
#library(Factoshiny)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
install.packages('factoextra')
library(caTools)
#library(FactoMineR)
#library(Factoshiny)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
data4 <-dados4 %>% select(VP_E,VP_S)
data4<- as.matrix(data4)
data1<-as.matrix(dados4[,1])
row.names(data4)<- data1
data4<-scale(data4)
data4 <- na.omit(data4)
#MyKmeansFUN <- function(x,k) list(cluster=kmeans(x, k, iter.max=50))
#fviz_nbclust(data4, FUNcluster=MyKmeansFUN, method="gap_stat")
fviz_nbclust(data4,kmeans, method = "gap_stat")+
geom_vline(xintercept = 4, linetype = 2)
dados_kmeans<- kmeans(data4,4)
fviz_cluster(dados_kmeans,data = data4, geom = "point",ellipse = FALSE)
install.packages("VennDiagram")
