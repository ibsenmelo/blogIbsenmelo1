select(colunas[1]) %>%
unnest_wider(colunas[1])
}
if (length(b)>1) {
for (i in colnames(b)[2:ncol(b)]) {
if ('ICMS40' %in% xml.dataframe$level7) {
c1 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
} } }
c <- c %>% bind_rows(c1)
#grepl("^det", xx)
# Erro: Can't subset columns that don't exist.
# x Column `ICMS40` doesn't exist.
View(c)
arquivo <- "NFE_35191208733698003009550010000010231346597439.xml"
setwd("~/Desktop/sefaz/dados")
library(flatxml)
#prod1 <- nfe_item(arquivo)
df1 = as_list(read_xml(arquivo))
xml_df = tibble::as_tibble(df1) %>%
unnest_longer(nfeProc)
lp_wider = xml_df %>%
dplyr::filter(nfeProc_id == "infNFe") %>%
unnest_wider(nfeProc)
xml.dataframe <- fxml_importXMLFlat(arquivo)
xx <- colnames(lp_wider)
xx <- xx[grepl("^det", xx)]
# xml.dataframe <- xml.dataframe %>%
#   filter(level5 == 'prod'  | level5 == 'imposto')
b <-lp_wider%>% select(xx)
if ('ICMS' %in% xml.dataframe$level6) {
c <- lp_wider %>%
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c)
c <- c %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
}
if (length(b)>1) {
for (i in colnames(b)[2:ncol(b)]) {
if ('ICMS' %in% xml.dataframe$level6) {
c1 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
} } }
c <- c %>% bind_rows(c1)
#grepl("^det", xx)
# Erro: Can't subset columns that don't exist.
# x Column `ICMS40` doesn't exist.
setwd("~/Desktop/sefaz/dados")
arquivo <- "NFE_33191209285994000104550020000023451038585835.xml"
nfe_item <- function(arquivo) {
df1 = as_list(read_xml(arquivo))
xml_df = tibble::as_tibble(df1) %>%
unnest_longer(nfeProc)
lp_wider = xml_df %>%
dplyr::filter(nfeProc_id == "infNFe") %>%
unnest_wider(nfeProc)
xml.dataframe <- fxml_importXMLFlat(arquivo)
xx <- colnames(lp_wider)
xx <- xx[grepl("^det", xx)]
a1 <- lp_wider %>% ### pegando os produtos
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(prod) %>%
unnest_wider(prod)
c2 <- lp_wider %>% ### pegando outra camada de imposto
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(imposto) %>%
unnest_wider(imposto)
# if ('IPINT' %in% xml.dataframe$level7) {
#
# c3 <- lp_wider %>%    ### pegando CST -- precisa verificar pois tem varios CSTs
#   select(xx[1]) %>%
#   unnest_wider(xx[1]) %>%
#   select(imposto) %>%
#   unnest_wider(imposto) %>%
#   select(IPI) %>%
#   unnest_wider(IPI) %>%
#   select(IPINT) %>%
#   unnest_wider(IPINT)
#
# a1 <- a1 %>%
#   bind_cols(c3)
#
# }
a1 <- a1 %>%
bind_cols(c2)
if ('ICMS' %in% xml.dataframe$level6) {
c1 <- lp_wider %>%   ### pegando uma camada de imposto
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
a1 <- a1 %>%
bind_cols(c1)
}
### retirar os itens do formato lista
for (i in colnames(a1)) {
a1[i]<- a1[i][[1]][[1]][[1]][[1]][[1]]
}
#
# return(a1)
b <-lp_wider%>% select(xx)
if (length(b)>1) {
for (i in colnames(b)[2:ncol(b)]) {
b <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(prod) %>%
unnest_wider(prod)
###########
c2 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto)
b <- b %>%
bind_cols(c2)
# if ('IPINT' %in% xml.dataframe$level7) {
#
# c3 <- lp_wider %>%
#   select(i) %>%
#   unnest_wider(i) %>%
#   select(imposto) %>%
#   unnest_wider(imposto) %>%
#   select(IPI) %>%
#   unnest_wider(IPI) %>%
#   select(IPINT) %>%
#   unnest_wider(IPINT)
#
# b <- b %>%
#   bind_cols(c3)
#
# }
if ('ICMS' %in% xml.dataframe$level6) {
c1 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
b <- b %>%
bind_cols(c1)
}
##########
for (i in colnames(b)) {
b[i]<- b[i][[1]][[1]][[1]][[1]][[1]]
}
a1 <- a1 %>% bind_rows(b)
}}
a1$chave <- xml.dataframe[xml.dataframe['elem.']=='chNFe','value.']
return(a1)
}
xxx =nfe_item(arquivo)
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^NFE.*", notas)]
#notas <- notas[1:50]
produtos <- nfe_item(notas[1])
#dado_geral <- nfe_dados_gerais(notas[1])
for (nota in notas[1800:length(notas)]) {
print(nota)
prod1 <- nfe_item(nota)
produtos <- produtos %>% bind_rows(prod1)
#geral <- nfe_dados_gerais(nota)
#dado_geral <- nfe_dados_gerais(geral)
}
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^NFE.*", notas)]
#notas <- notas[1:50]
#produtos <- nfe_item(notas[1])
dado_geral <- nfe_dados_gerais(notas[1])
for (nota in notas[1800:length(notas)]) {
print(nota)
# prod1 <- nfe_item(nota)
# produtos <- produtos %>% bind_rows(prod1)
geral <- nfe_dados_gerais(nota)
dado_geral <- dado_geral %>% bind_rows(geral)
}
View(dado_geral)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
# criando uma função para pegar os itens da nota fiscal
nfe_item <- function(arquivo) {
df1 = as_list(read_xml(arquivo))
xml_df = tibble::as_tibble(df1) %>%
unnest_longer(nfeProc)
lp_wider = xml_df %>%
dplyr::filter(nfeProc_id == "infNFe") %>%
unnest_wider(nfeProc)
xml.dataframe <- fxml_importXMLFlat(arquivo)
xx <- colnames(lp_wider)
xx <- xx[grepl("^det", xx)]
a1 <- lp_wider %>% ### pegando os produtos
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(prod) %>%
unnest_wider(prod)
c2 <- lp_wider %>% ### pegando outra camada de imposto
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(imposto) %>%
unnest_wider(imposto)
a1 <- a1 %>%
bind_cols(c2)
if ('ICMS' %in% xml.dataframe$level6) {
c1 <- lp_wider %>%   ### pegando uma camada de imposto
select(xx[1]) %>%
unnest_wider(xx[1]) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
a1 <- a1 %>%
bind_cols(c1)
}
### retirar os itens do formato lista
for (i in colnames(a1)) {
a1[i]<- a1[i][[1]][[1]][[1]][[1]][[1]]
}
b <-lp_wider%>% select(xx)
if (length(b)>1) {
for (i in colnames(b)[2:ncol(b)]) {
b <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(prod) %>%
unnest_wider(prod)
c2 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto)
b <- b %>%
bind_cols(c2)
if ('ICMS' %in% xml.dataframe$level6) {
c1 <- lp_wider %>%
select(i) %>%
unnest_wider(i) %>%
select(imposto) %>%
unnest_wider(imposto) %>%
select(ICMS) %>%
unnest_wider(ICMS)
colunas <- colnames(c1)
c1 <- c1 %>%
select(colunas[1]) %>%
unnest_wider(colunas[1])
b <- b %>%
bind_cols(c1)
}
for (i in colnames(b)) {
b[i]<- b[i][[1]][[1]][[1]][[1]][[1]]
}
a1 <- a1 %>% bind_rows(b)
}}
a1$chave <- xml.dataframe[xml.dataframe['elem.']=='chNFe','value.']
return(a1)
}
#setwd("~/Desktop/sefaz/dados")
#arquivo <- "NFE_33191209285994000104550020000023451038585835.xml"
#xxx =nfe_item(arquivo)
### criando uma função para pegar os dados gerais de uma nota fiscal (que não estão nos itens)
library(flatxml)
nfe_dados_gerais <- function(arquivo) {
xml.dataframe <- fxml_importXMLFlat(arquivo)
xml.dataframe <- xml.dataframe %>%
filter(is.na(level5) | level5 != 'prod') %>%
filter(is.na(level5) | level5 != 'imposto') %>%
filter(level3 != 'Signature')
### o level6 será utilizado como nome das colunas por isso as modificações abaixo.
xml.dataframe$level6 <- if_else(is.na(xml.dataframe$level6),
paste(xml.dataframe$elem.,xml.dataframe$level4,sep = "_"),
paste(xml.dataframe$level6,xml.dataframe$level5, sep = "_"))
### inserindo a chave na tabela a.
#a$chave <- xml.dataframe[xml.dataframe['elem.']=='chNFe','value.']
xml.dataframe <- xml.dataframe %>%
select(value.,level6)%>%
drop_na(value.) %>%
pivot_wider(names_from = level6, values_from = value.)
return(xml.dataframe)
}
# ### teste em uma nota
# setwd("~/Desktop/sefaz/dados")
# xx2 = nfe_dados_gerais(arquivo)
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^NFE.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
produtos <- nfe_item(notas[1])
dado_geral <- nfe_dados_gerais(notas[1])
for (nota in notas[1:length(notas)]) {
## se ocorrer erro, o print(nota) vai permitir ver em qual nota ocorreu o erro.
#print(nota)
prod1 <- nfe_item(nota)
produtos <- produtos %>% bind_rows(prod1)
geral <- nfe_dados_gerais(nota)
dado_geral <- dado_geral %>% bind_rows(geral)
}
View(produtos)
View(produtos)
setwd("~/Desktop/sefaz/dados")
arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(arquivo)
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(arquivo)
for (nota in notas) {
xml1 <- fxml_importXMLFlat(nota)
xml.dataframe <- xml.dataframe %>% bind_rows(xml1)
}
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(arquivo) %>%
filter(elem. == 'descEvento')
for (nota in notas) {
xml1 <- fxml_importXMLFlat(nota)
xml.dataframe <- xml.dataframe %>% bind_rows(xml1)
}
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(arquivo) %>%
filter(elem. == 'descEvento')
for (nota in notas) {
xml1 <- fxml_importXMLFlat(nota)
xml.dataframe <- xml.dataframe %>% bind_rows(xml1)%>%
filter(elem. == 'descEvento')
}
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(notas[1])
# for (nota in notas) {
#
#   xml1 <- fxml_importXMLFlat(nota)
#   xml.dataframe <- xml.dataframe %>% bind_rows(xml1)%>%
#   filter(elem. == 'descEvento')
#
# }
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(notas[1]) %>%
filter(elem. %in% ('descEvento','tpEvento','chNFe')) %>%
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(notas[1]) %>%
filter(elem. == 'descEvento' | elem. == 'tpEvento' | elem. == 'chNFe') %>%
select(elem.,value.)%>%
pivot_wider(names_from = elem., values_from = value.)
# for (nota in notas) {
#
#   xml1 <- fxml_importXMLFlat(nota)
#   xml.dataframe <- xml.dataframe %>% bind_rows(xml1)%>%
#   filter(elem. %in% ('descEvento','tpEvento','chNFe'))
#
# }
xml.dataframe$chNFe[[1]]
xml.dataframe$chNFe[[1]][[1]]
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
xml.dataframe <- fxml_importXMLFlat(notas[1]) %>%
filter(elem. == 'descEvento' | elem. == 'tpEvento' | elem. == 'chNFe') %>%
select(elem.,value.)%>%
distinct() %>%
pivot_wider(names_from = elem., values_from = value.)
xml.dataframe$chNFe[[1]][[1]]
# for (nota in notas) {
#
#   xml1 <- fxml_importXMLFlat(nota)
#   xml.dataframe <- xml.dataframe %>% bind_rows(xml1)%>%
#   filter(elem. %in% ('descEvento','tpEvento','chNFe'))
#
# }
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
#arquivo <- "EVENTO_3_NFE_33191234274233012372550000003794542668674810.xml"
library(flatxml)
nfe_evento <- function(nota) {
xml.dataframe <- fxml_importXMLFlat(nota) %>%
filter(elem. == 'descEvento' | elem. == 'tpEvento' | elem. == 'chNFe') %>%
select(elem.,value.)%>%
distinct() %>%
pivot_wider(names_from = elem., values_from = value.)
return(xml.dataframe)
}
xx <- nfe_evento(notas[1])
# for (nota in notas) {
#
#   xml1 <- fxml_importXMLFlat(nota)
#   xml.dataframe <- xml.dataframe %>% bind_rows(xml1)%>%
#   filter(elem. %in% ('descEvento','tpEvento','chNFe'))
#
# }
View(xx)
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
notas <- notas[1:50]
library(flatxml)
nfe_evento <- function(nota) {
xml.dataframe <- fxml_importXMLFlat(nota) %>%
filter(elem. == 'descEvento' | elem. == 'tpEvento' | elem. == 'chNFe') %>%
select(elem.,value.)%>%
distinct() %>%
pivot_wider(names_from = elem., values_from = value.)
return(xml.dataframe)
}
xx <- nfe_evento(notas[1])
for (nota in notas[2:length(notas)]) {
xml1 <- nfe_evento(nota)
xx <- xx %>% bind_rows(xml1)
}
setwd("~/Desktop/sefaz/dados")
notas <- list.files()
notas <- notas[grepl("^EVENTO.*", notas)]
### pegando as 50 primeiras notas
#notas <- notas[1:50]
library(flatxml)
nfe_evento <- function(nota) {
xml.dataframe <- fxml_importXMLFlat(nota) %>%
filter(elem. == 'descEvento' | elem. == 'tpEvento' | elem. == 'chNFe') %>%
select(elem.,value.)%>%
distinct() %>%
pivot_wider(names_from = elem., values_from = value.)
return(xml.dataframe)
}
xx <- nfe_evento(notas[1])
for (nota in notas[2:length(notas)]) {
xml1 <- nfe_evento(nota)
xx <- xx %>% bind_rows(xml1)
}
